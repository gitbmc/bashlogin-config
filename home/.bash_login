# BASH SETUP: for now, assume existing PATH is "safe", so we can remove
# absolute paths on commands...
#echo "DEBUG: at start - `date`"
#ps | grep 'bash$' | awk '{print $1}' | grep $$ > /dev/null || bash
#echo "DEBUG: after ps <pipe> grep - `date`"
#IGNOREEOF=2
FIGNORE='.o:~'
GLOBIGNORE='~'
#HISTCONTROL='ignoredups'
#export USER=${USER:=$LOGNAME}
#export HOSTNAME=${HOSTNAME:=$COMPUTERNAME}
#if [ -z "$PS1_ORIG" ]
#then
##       export PS1_ORIG=${PS1:-"$ "}$h\$ 
#        export PS1_ORIG='"$HOSTNAME($USER)$ 
#"'
#fi
#alias sh="PS1=$PS1_ORIG sh"
#alias ksh="PS1=$PS1_ORIG ksh"
PS1="\[\033]0;\u@\h:\w\007\033[31m\]\u@\h:\[\033[35m\w \033[31m[\!]\033[0m\]
"
#if [ -x /usr/bin/getent ]
#then
#  XSHOST=`/usr/bin/getent hosts $HOSTNAME | awk '{print $1;exit}'`
#if type getent > /dev/null 2>&1 # TODO swap these two checks, so netstat is 1st?
#then
#  XSHOST=`getent hosts $HOSTNAME | awk '{print $1;exit}'`
#elif type netstat > /dev/null 2>&1
#then
#  XSHOST=`netstat -rn | awk '$1 ~ /0.0.0.0/ {print $4;exit}'`
#elif type nslookup > /dev/null 2>&1 # yuck: nslookup could incur a long time-out
#then
#  XSHOST=`nslookup $HOSTNAME 2> /dev/null | awk --re-interval '$NF ~ /[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}/ {a=$NF} END{print a}'`
#else
#  XSHOST=$HOSTNAME
#fi
#if [ "$DISPLAY" == "needs-to-be-defined" ] # Git Bash as of 2.7.2 does this...
#then
#  unset DISPLAY
#fi
#echo "export DISPLAY=$XSHOST:`echo ${DISPLAY:=:0.0} | awk -F: '{ print $2 }'`"

# ABOVE added by bruce 2011/09/20: the following line ensures we're
# running bash (so we can simply "copy/paste" down to the echo export
# DISPLAY=... command in a foreign command-line environment; e.g., a
# lab terminal server)

# ...BELOW modified by bruce 2011/09/21 (cont.): old color prompt settings
#PS1="\[\033]0;\u@\h:\w\007\033[32m\]\u@\h:\[\033[33m\w \033[36m[\!]\033[0m\]
#"
#PS1="\u@\h:\[\033[35m\w \033[31m[\!]\033[0m\]
#"

#stty erase  commented out - modified by bruce 2002/06/03
#biff y commented out - modified by bruce 2002/06/03
#alias r='fc -s' ... no fc command ...???
set -b
#shopt -s checkhash ... safter to leave off ...???
#shopt -s checkwinsize ...already on by default
shopt -s histreedit
shopt -s histverify
#if shopt | grep no_empty_cmd_completion > /dev/null
#then ... just set it (don't bother checking if it was already set)
shopt -s no_empty_cmd_completion
#fi

#echo "DEBUG: before aliases - `date`"
# conversion from csh/tcsh
#alias more='less -EK' # so aliases below involving more work properly on PC
alias a='alias'
#alias add-tar='tar r'
#amg () { /opt/nortel/*/amgui/appman "$@" > /tmp/appman.$$.log 2>&1 & }
args () { if [ $# != 2 ]; then echo "${FUNCNAME}: expecting two args - argnum1 argnum2" > /dev/stderr; return 1; fi; nawk " { for (i = "$1" ; i <= "$2" ; i++) print $ i } " ; }
#ars () { archie -o "${!#}" "$@" ; }
#asc () { ars -s "$@" && cah "${!#}" ; }
#alias bmc='./configure --prefix=$HOME --exec-prefix=$HOME/sw/`uname`'->not used
#alias bye='logout'->not used
#alias c='clear'->not used
#cah () { grep "Location:" "$@" | wc -l ; }
cc-o () { cc "$@".c -o "${!#}" ; }
cdl () { cd "$@" && ls ; }
cdll () { cd "$@" && ls -l ; }
#alias cdm='cd $VOBROOT/OptivityNMSCarrier/moa'
#alias cdo='cd $VOBROOT/OptivityNMSCarrier'
#alias cdr='cd $VOBROOT/OptivityNMSCarrier/apps/rg'
cl () { cd "$@" && ls ; }
cll () { cd "$@" && ls -l ; }
#alias cp='cp -i' ... default cp behaviour...???
#alias ct='cleartool'
#alias ctclean='find . \( -name _solaris -o -name Templates.DB -o -name .cmake.state -o -name .pure -o -name "*_pure*" -o -name "y.*" -o -name bin -o -name lib \) -exec rm -rf {} \;'
#alias d='dirs'->not used
#dgcc () { gcc -g -pedantic -Wall -Wwrite-strings -Wid-clash-31 -Wpointer-arith -Wcast-qual -Wcast-align -Wtraditional -Wstrict-prototypes -Wmissing-prototypes -Wnested-externs -Winline -target $arch "$@" ; }->not used
#alias dl='dirs -v'->not used
#alias gc='gnuclient'->not used
#alias em='emacs'->not used
#alias es='exec $SHELL'->not used
f () { find . -name "$@" -print ; }
#alias findsrc='find . -name \*.[cCh] -print'->not used
#fk () { kill `gp "$@"` ; }->not used
#fk9 () { kill -9 `gp "$@"` ; }->not used
#alias fnpnew='find . \( -name "*.[icCh]" -o -name "*.imf" -o -name "*.y" \) -newer .allsrc -print'->not used
#fnpnewer () { find . \( -name "*.[icCh]" -o -name "*.imf" -o -name "*.y" \) -newer "$@" -print ; }->not used
#alias g='gone forever'->not used
#gnb () { gnbrowse $@" > /tmp/gnbrowse.$$.log 2>&1 & }->not used
#gne () { gnconfig $@" > /tmp/gnconfig.$$.log 2>&1 & }->not used
#gp () { ps -ef | grep "$@" | grep -v grep | awk "{print $ 2;exit}" ; }->not used
alias h='history'
alias hg='h | grep'
#alias hps='ps -ef | grep -E "orbix|ambb|ama|gnb|gnconfig" | grep -v grep | grep -v "ps -ef"'
#alias irm='/bin/rm -i'->not used
alias j='jobs -l'
l () { ls -AlF "$@" | more ; }
alias la='ls -AF'
#alias le='less'->not used
#alias ll='ls -l'...already defined...?
llm () { ls -l "$@" | more ; }
lm () { ls "$@"| more ; }
#alias lo='clear && logout'->not used
#alias log='clear && logout'->not used
lr () { ls -AlRF "$@" | more ; }
alias lsf='ls -F'
alias lsr='ls -R'
alias m='more'
alias manu='man -u'
mcd () { if [ $# != 1 ]; then echo "${FUNCNAME}: expecting one arg - newdir" > /dev/stderr; return 1; fi; mkdir -p "$1" && cd "$1" ; }
alias md='mkdir -p'
#mo () { if [ $# != 1 ]; then echo "${FUNCNAME}: expecting one arg - file" > /dev/stderr; return 1; fi; mv "$1" "$1.orig" && cp -p "$1.orig" "$1" && chmod +w "$1" ; }... use cp -p instead...
#ms () { if [ $# != 2 ]; then echo "${FUNCNAME}: expecting two args - file suffix" > /dev/stderr; return 1; fi; mv "$1" "$1.$2" && cp -p "$1.$2" "$1" && chmod +w "$1" ; }->not used
#alias mv='mv -i'... default cp behaviour...???
#alias oc='objectcenter -pdm'
#ocgp () { objectcenter -pdm "${1:-a.out}" `gp "${@:-a.out}"` ; }
#alias oob='xemacs -batch -l $HOME/src/emacs/batch-oobr.el'
p () { pushd +"$@" ; }
alias po='popd'
pol () { popd "$@" && ls ; }
poll () { popd "$@" && ll ; }
#pr2ps () { if [ $# != 2 ]; then echo "${FUNCNAME}: expecting two args - file header" > /dev/stderr; return 1; fi; pr -f -h "$2" $1 | lp2ps -u -o -t0.3in -b0.3in ; }->not used
#alias psf='ps -f'->not used
psg () { ps -ef | grep "$@" | grep -v grep ; }
psm () { ps ${@:--ef} | more ; }
#alias psu='ps -fu bmcleod'->not used
alias pu='pushd'
pul () { pushd "$@" && ls ; }
pull () { pushd "$@" && ll ; }
#alias pwd='echo $PWD' ... builtin...?
#rcmd () { local host="${1:-localhost}" && shift && remsh "$host" "setenv DISPLAY ${HOST}:0.0;${@:-$SHELL}" ; }
alias rd='rmdir'
#alias rem='remind'->not used
#remind () { local subject="${1:-Reminder}" && shift && echo mailx -s \""$subject"\" $USER "</dev/null" ">/dev/null" | at "${@:-0000 tomorrow}" ; }->not used
#alias rl='rlogin'->not used
#echo "DEBUG: after aliases, before functions - `date`"

#stcmp () { if [ $# != 2 ]; then echo "${FUNCNAME}: expecting two args - dir1 dir2" > /dev/stderr; return 1; fi; pushd "$1" > /dev/null && find . -type f -exec concatargs cmp {} % "$2" / {} % \; ; popd > /dev/null ; }->not used
#stdiff () { if [ $# != 2 ]; then echo "${FUNCNAME}: expecting two args - dir1 dir2" > /dev/stderr; return 1; fi; pushd "$1" > /dev/null && find . -type f -exec concatargs diff {} % "$2" / {} % \; ; popd > /dev/null ; }->not used
#stm () { if [ $# != 1 ]; then echo "${FUNCNAME}: expecting one arg - terminal-type" > /dev/stderr; return 1; fi; export TERM="$1" && eval `tset` ; }->not used
swap () { if [ $# != 2 ]; then echo "${FUNCNAME}: expecting two args - file1 file2" > /dev/stderr; return 1; fi; set __tmpswapdir=`dirname "$1"` && mv "$1" $__tmpswapdir/.tmpswap.$$ && mv "$2" "$1" && mv $__tmpswapdir/.tmpswap.$$ "$2" && unset __tmpswapdir ; }
xtitle () { echo -ne "\033]0;$@\007" ; }
#vmo () { if [ $# != 1 ]; then echo "${FUNCNAME}: expecting one arg - file" > /dev/stderr; return 1; fi; mv "$1" "$1.orig" && cp -p "$1.orig" "$1" && vi "$1" ; }
#alias vt100='stm vt100'->not used
#alias vt102='stm vt102'->not used
#alias nwhois='/usr/ucb/whois -h nic.ddn.mil'->not used
#xe () { local name=`basename "${@:-$SHELL}"`; xterm -title "$name" -xrm "*iconName:$name" -e "${@:-$SHELL}" ; }->not used
#xl () { local name="$HOSTNAME ${@:-$USER}"; xterm -title "$name" -xrm "*iconName:$name" -e rlogin -l "${1:-$USER}" "${2:-localhost}" ; }->not used
#xls () { local name="${@:-login} $HOSTNAME"; xterm -ls -title "$name" -xrm "*iconName:$name" ; }->not used
#xt () { local name="${@:-$HOSTNAME}"; xterm -title "$name" -xrm "*iconName:$name" ; }->not used
#xtl () { local name="${@:-$HOSTNAME} $USER"; xterm -title "$name" -xrm "*iconName:$name" -e rlogin -l "${2:-$USER}" "${1:-localhost}" ; }->not used
#xtlr () { local name="${@:-$HOSTNAME} root"; xterm -title "$name" -xrm "*iconName:$name" -e rlogin -l root "${1:-localhost}" ; }->not used
#xtltr () { local name="${@:-$HOSTNAME} troot"; xterm -title "$name" -xrm "*iconName:$name" -e rlogin -l troot "${1:-localhost}" ; }->not used
alias xto='xterm -title "ottgate" -xrm "*iconName:ottgate" -e telnet ottgate'->not used
#alias setup='/opt/corp/projects/edgelbviews/bssm/env.tcsh'->not used

#bmcsetup () { for dest in $*; do remsh $dest -l root 'cd /; tar xf -' < $HOME/sw/SunOS/bmc.tar; done; }->not used

# added by bruce 2002/05/16: path manipulation (modified 2002/06/03)

#checkpath ()->not used
#{
#        mypath=$1
#        shift
#        echo $mypath | awk -F: '{for (i=1; i<=NF; i++) print $i}' | grep -l "^$@$" > /dev/null
#}->not used

#appendpath ()->not used
#{
#        mypath=$1
#        shift
#        if [ "${mypath:0-1}" != ":" ]
#        then
#                echo "${mypath}:$@"
#        else
#                echo "$mypath$@"
#        fi
#}->not used

#prependpath ()->not used
#{
#        mypath=$1
#        shift
#        if [ "${mypath::1}" != ":" ]
#        then
#                echo "${@}:$mypath"
#        else
#                echo "$@$mypath"
#        fi
#}->not used

#append_to_path ()->not used
#{
#        if checkpath "$PATH" "$@"
#        then :
#        else
#                PATH=`appendpath "$PATH" "$@"`
#        fi
#}->not used

#append_to_manpath ()->not used
#{
#        if checkpath "$MANPATH" "$@"
#        then :
#        else
#                MANPATH=`appendpath "$MANPATH" "$@"`
#        fi
#}->not used

#append_to_libpath ()->not used
#{
#        if checkpath "$LD_LIBRARY_PATH" "$@"
#        then :
#        else
#                LD_LIBRARY_PATH=`appendpath "$LD_LIBRARY_PATH" "$@"`
#        fi
#}->not used

#prepend_to_path ()->not used
#{
#        if checkpath "$PATH" "$@"
#        then :
#        else
#                PATH=`prependpath "$PATH" "$@"`
#        fi
#}->not used

#prepend_to_manpath ()->not used
#{
#        if checkpath "$MANPATH" "$@"
#        then :
#        else
#                MANPATH=`prependpath "$MANPATH" "$@"`
#        fi
#}->not used

#prepend_to_libpath ()->not used
#{
#        if checkpath "$LD_LIBRARY_PATH" "$@"
#        then :
#        else
#                LD_LIBRARY_PATH=`prependpath "$LD_LIBRARY_PATH" "$@"`
#        fi
#}->not used

#remove_from_path ()->not used
#{
#        PATH=`echo $PATH | /bin/awk -F: "{for (i = 1; i <= NF; i++) {if (\"$@\" != $ i) {printf \"%s\", $ i;if (i != NF) printf \":\"}}}"`
#}->not used

#remove_from_manpath ()->not used
#{
#        MANPATH=`echo $MANPATH | /bin/awk -F: "{for (i = 1; i <= NF; i++) {if (\"$@\" != $ i) {printf \"%s\", $ i;if (i != NF) printf \":\"}}}"`
#}->not used

#remove_from_libpath ()->not used
#{
#        LD_LIBRARY_PATH=`echo $LD_LIBRARY_PATH | /bin/awk -F: "{for (i = 1; i <=# NF; i++) {if (\"$@\" != $ i) {printf \"%s\", $ i;if (i != NF) printf \":\"}}}"`
#}->not used

#first_in_path ()->not used
#{
#        remove_from_path "$@"
#        PATH=`prependpath "$PATH" "$@"`
#}->not used

#first_in_manpath ()->not used
#{
#        remove_from_manpath "$@"
#        MANPATH=`prependpath "$MANPATH" "$@"`
#}->not used

#first_in_libpath ()->not used
#{
#        remove_from_libpath "$@"
#        LD_LIBRARY_PATH=`prependpath "$LD_LIBRARY_PATH" "$@"`
#}->not used

#last_in_path ()->not used
#{
#        remove_from_path "$@"
#        PATH=`appendpath "$PATH" "$@"`
#}->not used

#last_in_manpath ()->not used
#{
#        remove_from_manpath "$@"
#        MANPATH=`appendpath "$MANPATH" "$@"`
#}->not used

#last_in_libpath ()->not used
#{
#        remove_from_libpath "$@"
#        LD_LIBRARY_PATH=`appendpath "$LD_LIBRARY_PATH" "$@"`
#}->not used
echo "DEBUG: after functions, before path setup - `date`"

#my_prefix="${_MY_PREFIX:-$HOME/sw}"->not used
#my_mach_dep_prefix="${_MY_MACH_DEP:-$my_prefix/`uname -s`/`uname -p`}"->not used

#prepend_to_path "${_MY_MACH_BIN:-$my_mach_dep_prefix/bin}"->obsolete
##append_to_path "/usr/ccs/bin"->obsolete
#append_to_path "/usr/ucb"->obsolete
#append_to_path "/usr/dt/bin"->obsolete
#append_to_path "/usr/openwin/bin"->obsolete
##append_to_path "/usr/X11R6/bin"->obsolete
#append_to_path "/usr/local/bin"->obsolete
#append_to_path "/usr/local/samba/bin"->obsolete
#append_to_path "/opt/sfw/bin"->obsolete
#last_in_path "/usr/ccs/bin"->obsolete
#append_to_path "$HOME/bin"->obsolete
#remove_from_path "."->obsolete
##first_in_path "/usr/local/bin"->obsolete
##append_to_path "/opt/TWWfsw/bin"->obsolete
echo "DEBUG: after path setup, before man/libpath setup - `date`"

#if [ -z "$MANPATH" ]->obsolete
#then
#        export MANPATH=/usr/share/man:/usr/man:/man:/usr/openwin/share/man:/usr/openwin/man:/usr/dt/share/man:/usr/dt/man:/usr/perl5/man
#fi->obsolete

#append_to_manpath "/usr/share/man"->obsolete
#append_to_manpath "/usr/man"->obsolete
##append_to_manpath "/usr/X11R6/man"->obsolete
#append_to_manpath "/usr/local/man"->obsolete
#append_to_manpath "/usr/local/samba/man"->obsolete
#append_to_manpath "/opt/sfw/man"->obsolete
#append_to_manpath "$my_prefix/man"->obsolete
##append_to_manpath "/usr/local/gnuman"->obsolete

#append_to_libpath "/usr/local/lib"->obsolete
#append_to_libpath "/opt/sfw/lib"->obsolete
#append_to_libpath "${_MY_MACH_LIB:-$my_mach_dep_prefix/lib}"->obsolete
echo "DEBUG: after man/libpath setup, before mu/etc. - `date`"

# END added by bruce 2002/05/16 (modified 2002/06/03)

# following prompt command - added by bruce 2002/06/19, commented out 2002/09/26
#PROMPT_COMMAND=myprompt
#myprompt () {
#       local projectprompt
#
#       #if [ "$PROJECTDIR" ]
#       #then
#       #       projectprompt="(`/bin/basename $PROJECTDIR`)"
#       #fi
#       #xtitle "$HOSTNAME($USER):`/bin/basename $PROJECTDIR`-$PWD"
#       ##PS1='<newline><bold><green>$myprompt</bold></green><newline>'?
#       #PS1="\h(\u):`/bin/basename $PROJECTDIR` \w [\!] \$ "
#       #xtitle "$USER@$HOSTNAME${projectprompt}:$CWD"
#}

# following memory usage command - added by bruce 2002/08/??
mu ()
{
    users=$@
    if [ -z "$users" ]
    then
        users=`ps -eo user | tail +2 | sort -u`
    fi

    for user in $users
    do
        ps -o vsz,rss -u $user | /bin/tail +2 | /bin/awk "{vsz += $ 1; rss += $ 2}; END {print \"$user is using\", vsz/1024, \"MBytes of virtual memory,\", rss/1024, \"of it in core\"}"
    done

    if [ -z "$@" ]
    then
        ps -eo vsz,rss | /bin/tail +2 | /bin/awk "{vsz += $ 1; rss += $ 2}; END {print \"Total of\", vsz/1024, \"MBytes of virtual memory used,\", rss/1024, \"of it in core\"}"
    fi
}

# following disk usage command - added by bruce 2004/08/16
ku ()
{
    entries=$@
    if [ -z "$entries" ]
    then
        entries='*'
    fi

    du -sk $entries | awk '{print;total += $ 1}; END {print total, "(total:", total/1024, "MB)"}'
}

#alias clant='CLASSPATH= ant'
#alias juant='CLASSPATH=D:\\Profiles\\bmcleod\\Software\\junit3.8.1\\junit.jar ant'

# added by bruce 2004/10/22 - emacs setup
#export EMACSLOADPATH=~/emacs/init-load

# save INFOPATH to EMACSINFOPATH so we can use it for emacs while
# avoiding emacs behaviour of losing default info path settings
# (i.e. we will set INFOPATH to null as we invoke emacs)
if [ "$INFOPATH" ]
then
  export EMACSINFOPATH=$INFOPATH
fi

# END added by bruce 2004/10/22

## added by bruce 2006/11/22: clearcase aliases
#alias ctlc='cleartool lsco -all -cview -s'
#alias ctlv='cleartool lsview \*${USER}\*'
## END added by bruce 2006/11/22
## added by bruce 2006/11/22: clearcase aliases
#alias ctsv='cleartool setview'
## END added by bruce 2006/11/22

# added by bruce 2011/08/08: rxvt with large scroll buffer and bash login shell
#alias rx='rxvt -sl 8192 -C -e bash -l &'->not used
# END added by bruce 2011/08/08

echo "DEBUG: before localshrc - `date`"
# read local setup
__LOCALSHRC_=${LOCALSHRC:-.localshrc}
if [ -r "/$__LOCALSHRC_" ]
then
  . "/$__LOCALSHRC_"
elif [ -r "$HOME/$__LOCALSHRC_" ]
then
  . "$HOME/$__LOCALSHRC_"
fi
unset __LOCALSHRC_

if [ "$PWD" != "$HOME" ]
then
  cd "$HOME"
fi

echo "DEBUG: before shell init - `date`"
# SHOULD BE LAST: look for initial commands to be evaluated
if [ "__SHELL_INIT_" ]
then
  eval "$__SHELL_INIT_"
  unset __SHELL_INIT_
fi
echo "DEBUG: at end of bash login - `date`"
